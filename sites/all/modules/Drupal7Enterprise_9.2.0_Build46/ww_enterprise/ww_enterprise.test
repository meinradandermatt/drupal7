<?php

/**
 * @file
 * Tests for ww_enterprise.module.
 */

/**
 * Tests Node Publish
 */
class WWEnterpriseTestCase extends DrupalWebTestCase
{
	/**
	 * XML RPC user
	 *
	 * @var stdClass
	 */
	protected $_xmlRpcUser = null;

	protected $_contentType = null;
    protected $_file_selector_field_id = null;
    protected $_img_selector_field_id = null;
	protected $_body_field_id = null;

	public static function getInfo()
	{
		return array(
		  'name' => 'WW Enterprise Test',
		  'description' => 'Test the WW Enterprise module.',
		  'group' => 'WW Enterprise',
		);
	}

	/**
	 * Sets up the test environment.
	 *
	 * @return void
	 */
	function setUp()
	{
		parent::setUp( array('ww_enterprise') );

		// Create a new User for testing.
		$this->_xmlRpcUser = $this->drupalCreateAdminUser();

		// Create a new ContentType.
		$this->_contentType = $this->createContentType();
	}

	/**
	 * creates and logs an admin user
	 *
	 * No actual testing is done for this function, this is part of the setup.
	 *
	 * @return  bool|object The loaded Drupal user, or false if something went wrong.
	 */
	public function drupalCreateAdminUser( array $permissions = array() )
	{
		$roles = user_roles();
		$index = array_search('administrator', $roles);
		$user = $this->drupalCreateUser($permissions);
		$user->roles[$index] = 'administrator';
		return user_save($user);
	}

	/**
	 * Create a Content Type for testing.
	 *
	 * Creates a Content Type for the testcases, this function is called as part of the setup to ensure we have a
	 * contained type to test against. Creates a ContentType and creates a set of fields for the ContentType.
	 *
	 * @return object The created ContentType.
	 */
	public function createContentType()
	{
		// Create the content type.
		$type = array(
			'type' => 'ww_enterprise_web_test',
			'name' => 'WW Enterprise Web Test',
			'base' => 'node_content',
			'custom' => 1,
			'modified' => 1,
			'locked' => 0,
			'title_label' => 'WW Enterprise Web TestCase',
			'description' => 'A test ContentType.'
		);

		$type = node_type_set_defaults( $type );
		$result = node_type_save( $type );

		$this->assertEqual($result, SAVED_NEW, 'createContentType: ContentType was created succesfully.');

		$artComponentInstance = node_add_body_field( $type );
		$artComponentInstance['settings']['text_processing'] = '1';
		field_update_instance($artComponentInstance);

		if (!is_array($artComponentInstance)) {
			$this->fail('createContentType: Could not create the "body" field.');
		} else {
			$this->pass('createContentType: Succesfully created the "body" field.');
			$this->_body_field_id = $artComponentInstance['field_id'];
		}

		// Create the file field.
		$field = array(
			'field_name' => 'field_file_web',
			'type' => 'file',
			'cardinality' => 1,
			'locked' => FALSE,
			'indexes' => array('fid' => array('fid')),
			'settings' => array( 'display_field' => TRUE, 'display_default' => TRUE, ),
		);

		$field = field_create_field( $field );
		if (!isset($field['id'])) {
			$this->fail('createContentType: Could not create the "field_file_web" field.');
		} else {
			$this->pass('createContentType: Succesfully created the "field_file_web" field, with id: ' . $field['id']);
			$this->_file_selector_field_id = $field['id'];
		}

		$instance = array(
			'field_name' => 'field_file_web',
			'entity_type' => 'node',
			'label' => 'file',
			'bundle' => 'ww_enterprise_web_test',
			'description' => st(''),
			'required' => FALSE,
			'settings' => array( 'file_extensions' => 'txt jpg png', ), // File Filter.
		);

		field_create_instance( $instance );

		// create the img field
		$field = array(
			'field_name' => 'field_img_web',
			'type' => 'image',
			'cardinality' => 1,
			'locked' => FALSE,
			'indexes' => array('fid' => array('fid')),
			'settings' => array( 'display_field' => TRUE, 'display_default' => TRUE, ),
		);

		$field = field_create_field( $field );
		if (!isset($field['id'])) {
			$this->fail('createContentType: Could not create the "field_img_web" field.');
		} else {
			$this->pass('createContentType: Succesfully created the "field_img_web" field, with id: ' . $field['id']);
			$this->_img_selector_field_id = $field['id'];
		}

		$instance = array(
			'field_name' => 'field_img_web',
			'entity_type' => 'node',
			'label' => 'image',
			'bundle' => 'ww_enterprise_web_test',
			'description' => st(''),
			'required' => FALSE,
			'settings' => array('file_extensions' => 'jpg png',	), // File Filter.
		);

		field_create_instance( $instance );

		return $type;
	}

	/**
	 * Tests retrieving the Content Types from the database.
	 *
	 * Tests if the ContentType created in the createContentType function was fully created.
	 * by using the XML RPC exposed function to retrieve the ContentTypes and checking if it was
	 * set, and contains the correct information.
	 *
	 * @return void.
	 */
	public function testGetContentTypes()
	{
		$contentTypes = ww_enterprise_xmlrpc_getContentTypes( true );

		$found = FALSE;
		foreach ($contentTypes as $contentType) {
			if ($contentType['type'] == $this->_contentType->type) {
				$found = TRUE;
			}
		}
		$this->assertTrue($found, 'testGetContentTypes: Content Type "' . $this->_contentType->type
			. '" was created succesfully.');
	}

	/**
	 * Tests retrieving field data for the fields of the test content type.
	 *
	 * Tests if for each of the fields in the ContentType the field data can be retrieved.
	 * Tests if for each of the retrieved data sets the field_info_fields is set.
	 *
	 * @return void.
	 */
	public function testGetFieldData()
	{
		// Retrieve the field definition.
		$fieldDefinitions = ww_enterprise_xmlrpc_getFields(true);

		if (!isset($fieldDefinitions[$this->_contentType->type])) {
			$this->fail('testGetFieldData: Field data definition for the test could not be retrieved.');
		} else {
			$this->pass('testGetFieldData: Field data definition for the Content Type is set.');
		}

		// Get the field definition for our test ContentType.
		$definition = $fieldDefinitions[$this->_contentType->type];

		// Check if the special props are set. More in depth testing might be required.
		$publishProperties = $definition['publish_properties'];
		if (count($publishProperties) < 3) {
			$this->fail('testGetFieldData: Special properties are not set correctly for the ContentType.');
		} else {
			$this->pass('testGetFieldData: Special property count is correct.');
		}

		// Test if all the properties were set.
		$properties = array(C_DIALOG_DRUPAL7_STICKY, C_DIALOG_DRUPAL7_COMMENTS, C_DIALOG_DRUPAL7_PROMOTE);
		foreach ($properties as $property) {
			if (!isset($publishProperties[$property])) {
				$this->fail('testGetFieldData: Special property ' . $property . ' not found for the ContentType.');
			} else {
				$this->pass('testGetFieldData: Special Property '. $property . ' was found.');
			}
		}

		// Check the field definition.
		$fields = $definition['fields'];

		// Check the "body" field.
		if (!isset($fields['body']))
		{
			$this->fail('testGetFieldData: Body field is not set for the Content Type.');
		} else {
			$this->pass('testGetFieldData: "body" field exists.');
			// Check that the field info is set.
			if (!isset($fields['body']['field_info_fields']) || count($fields['body']['field_info_fields']) == 0 ){
				$this->fail('testGetFieldData: "body" field does not have field_info fields.');
			} else {
				$this->pass('testGetFieldData: "body" field has Field Info.');
			}
		}

		// Check the "field_file_web" field.
		if (!isset($fields['field_file_web'])){
			$this->fail('testGetFieldData: "field_file_web" is not set for the ContentType');
		} else {
			$this->pass('testGetFieldData: "field_file_web" field exists.');
			// Check that the field info is set.
			if (!isset($fields['field_file_web']['field_info_fields']) || count($fields['field_file_web']['field_info_fields']) == 0 ){
				$this->fail('testGetFieldData: "field_file_web" field does not have field_info fields.');
			} else {
				$this->pass('testGetFieldData: "field_file_web" field has Field Info.');
			}
		}

		// Check the "field_img_web" field.
		if (!isset($fields['field_img_web'])){
			$this->fail('testGetFieldData: "field_img_web" is not set for the ContentType');
		} else {
			$this->pass('testGetFieldData: "field_img_web" field exists.');
			// Check that the field info is set.
			if (!isset($fields['field_img_web']['field_info_fields']) || count($fields['field_file_web']['field_info_fields']) == 0 ){
				$this->fail('testGetFieldData: "field_img_web" field does not have field_info fields.');
			} else {
				$this->pass('testGetFieldData: "field_img_web" field has Field Info.');
			}
		}
	}

	/**
	 * Test creating a new node.
	 *
	 * Creates a new Node in the system to see if the create action can be completed succesfully.
	 *
	 * @return void.
	 */
	public function testCrud()
	{
		$this->pass('testCreateNode: Started succesfully.');

		// Compose a file array for files to be created for Drupal.
		$files = array(
			'file0' => array (
				'source' => dirname(__FILE__) . '/WebTest/WebTest0.jpg',
				'content_type' => $this->_contentType->type,
				'field_id' => $this->_img_selector_field_id,
				'mime_type' => 'image/jpeg',
			),
			'file1' => array (
				'source' => dirname(__FILE__) . '/WebTest/WebTest1.jpg',
				'content_type' => $this->_contentType->type,
				'field_id' => $this->_img_selector_field_id,
				'mime_type' => 'image/jpeg',
			),
			'file2' => array(
				'source' => dirname(__FILE__) . '/WebTest/WebTest1.jpg',
				'content_type' => $this->_contentType->type,
				'field_id' => $this->_img_selector_field_id,
				'mime_type' => 'image/jpeg',
			),
			'file3' => array(
				'source' => dirname(__FILE__) . '/WebTest/WebTest3.txt',
				'content_type' => $this->_contentType->type,
				'field_id' => $this->_file_selector_field_id,
				'mime_type' => 'text/plain',
			),
			'file4' => array(
				'source' => dirname(__FILE__) . '/WebTest/WebTest4.txt',
				'content_type' => $this->_contentType->type,
				'field_id' => $this->_file_selector_field_id,
				'mime_type' => 'text/plain',
			),
		);

		// Test creating the files (In an ideal situation, we would use ww_enterprise_upload and enable the testmode.
		// This however works with file uploads, the Drupal upload does not allow tampering with the files, so we would
		// have to do a CURL form submit for example, however then we run into the problem that the OAUTH cannot be
		// faked which we need for this testcase.
		foreach ($files as $key => $data) {
			$source = $data['source'];
			$destination = ww_enterprise_utils_fileDirectoryPath();
			$destination_scheme = file_uri_scheme($destination);

			$this->assertTrue($destination_scheme, 'testCrud: Check to see if the destination scheme is valid for file: ' . $key . '.');
			$this->assertTrue(file_stream_wrapper_valid_scheme($destination_scheme), 'testCrud: Check to see if the destination scheme wrapper is valid for file: ' . $key . '.');

			$file = new stdClass();
			$file->uid      = $this->_xmlRpcUser->uid;
			$file->status   = FILE_STATUS_PERMANENT;
			$file->filename = trim(drupal_basename($source), '.');
			$file->uri      = $source;
			$file->filemime = 'image/jpeg';
			$file->filesize = filesize($source);
			$file->source = $source;
			$file->destination = file_destination($destination . $file->filename, FILE_EXISTS_RENAME);

			$this->assertTrue($file->destination, 'testCrud: Check to see if there isn\'t a blocking file at the destination path for file: ' . $key . '.');

			// Add in our check of the the file name length.
			$validators['file_validate_name_length'] = array();

			// Call the validation functions specified by this function's caller.
			$errors = file_validate($file, $validators);

			// Check for errors.
			if (!empty($errors)) {
				$this->fail('testCrud: The file did not pass validation, for file: ' . $key . '.');
			} else {
				$this->pass('testCrud: The file passed validation, for file: ' . $key . '.');
			}

			$file->uri = $file->destination;
			if (!copy($source, $file->uri)) {
				$this->fail('testCrud: The file could not be moved from the temporary location to the file destination for file: ' . $key . '.');
			} else {
				$this->pass('testCrud: The file was moved succesfully for file: ' . $key . '.');
			}

			// Set the permissions on the new file.
			drupal_chmod($file->uri);

			// If we are replacing an existing file re-use its database record.
			$existing_files = file_load_multiple(array(), array('uri' => $file->uri));
			if (count($existing_files)) {
				$existing = reset($existing_files);
				$file->fid = $existing->fid;
			}

			$success = file_save($file);
			if ($success) {
				$this->pass('testCrud: File succesfully created for file: ' . $key . '.');
			} else {
				$this->fail('testCrud: File could not be saved succesfully for file: ' . $key . '.');
			}

			$files[$key]['storedFile'] = $file;
		}

		$dossierProps = array(
			'ID' => 1,
			'Name' => 'WebTestCaseDossier_New',
			'Category' => 'News',
			'Description' => 'A simulated test for the WebTestCase.',
			'Action' => 'Publish',
			'Preview' => FALSE,
			'ExternalId' => '',
		);

		$formValues = array(
			DRUPAL7_CONTENT_TYPE => array($this->_contentType->type),
			C_DIALOG_DRUPAL7_TITLE => array('New Asset'),
			C_DIALOG_DRUPAL7_PROMOTE => '1',
			C_DIALOG_DRUPAL7_STICKY => '1',
			C_DIALOG_DRUPAL7_COMMENTS => 'Disable',
			C_DIALOG_DRUPAL7_PUBLISH => 1,
			$this->_body_field_id => array(array(
				'elements' => '<div class="story story_body" id="ebbeb3bf-3391-432c-194f-7586dc2e69c6"><p class="para para_$ID/NormalParagraphStyle"><span class="char char_$ID/[No_character_style]">niklflnk<img id="ent_22" src="ent_22" width="116" height="116"/>Web Test Case</span></p></div>',
				'attachments' => array('22' => $files['file0']['storedFile']->fid)
			)),
			$this->_file_selector_field_id => array($files['file3']['storedFile']->fid),
			$this->_img_selector_field_id => array($files['file1']['storedFile']->fid)
		);

		// Now that files were created, store a new node.
		$response = ww_enterprise_xmlrpc_saveNode( $dossierProps, $formValues, null, true );

		$node = node_load($response['nid']);

		// Update a node.
		$dossierProps['Name'] = 'WebTestCaseDossier_Updated';
		$dossierProps['Action'] = 'Update';
		$dossierProps['ExternalId'] = $response['nid'];
		$formValues[C_DIALOG_DRUPAL7_TITLE] = array('Updated Asset');
		$formValues[$this->_file_selector_field_id] = array($files['file4']['storedFile']->fid);
		$formValues[$this->_img_selector_field_id] = array($files['file2']['storedFile']->fid);

		$response = ww_enterprise_xmlrpc_saveNode( $dossierProps, $formValues, null, true );

		// Delete the Node.
		ww_enterprise_xmlrpc_removeNode($response['nid'], true);

		// Assert that the node cannot be loaded anymore.
		$node = node_load($response['nid']);
		$this->assertFalse($node, 'Test that the node was succesfully deleted.');

		// Check that the files are gone as well.
		$file1 = file_load($files['file1']['storedFile']->fid);
		$this->assertFalse($file1, 'Test that the file 1 was succesfully deleted.');
		$file2 = file_load($files['file2']['storedFile']->fid);
		$this->assertFalse($file2, 'Test that the file 2 was succesfully deleted.');
		$file3 = file_load($files['file3']['storedFile']->fid);
		$this->assertFalse($file3, 'Test that the file 3 was succesfully deleted.');
		$file4 = file_load($files['file4']['storedFile']->fid);
		$this->assertFalse($file4, 'Test that the file 4 was succesfully deleted.');
	}
}
